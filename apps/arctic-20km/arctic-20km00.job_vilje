#!/usr/bin/sh
#PBS -o /prod/forecast/run/Arctic-20km/tmp/Arctic-20km00_prep_o.log
#PBS -j oe
#PBS -k oe
#PBS -N A20km-prep
#PBS -l select=1:ncpus=16:mpiprocs=1
#PBS -l walltime=01:00:00
#PBS -V
#-----------------------------------------------
#-----------------------------------------------
exec 1>/prod/forecast/run/Arctic-20km/Arctic-20km00_prep.log0 2>&1
cd /prod/forecast/sea/ROMS/trunk/Apps/Arctic-20km
set -x
#
nodes=17
jobname='Arctic-20km00  - ROMS 3.5 : 20km'
#
## Include common HIRLAM functions
. $HOME/atmos/um/Scripts/Model_Funcs.sh
. $HOME/status/Status_Funcs.sh
HOST=${HOST-`uname -n`}
Runstatus "start ...." "$jobname" $nodes
trap 'Runstatus "FAILED ..." "$jobname" $nodes; exit 99' 0
#
date
#
# Load modules needed
source /etc/profile.d/modules.sh
module load nco proj udunits netcdf boost hdf5
#
#
#-----------------------------------------------
# Hvilke deler skal kjores?
#-----------------------------------------------
#
prepos=1    # 1/0: Preprocessing of external forcing
modelrun=1  # 1/0: Run the model
run_expmodel=0
postpros=1  # 1/0: Postprocessing of fields and time series
#-----------------------------------------------
# Set paths
#-----------------------------------------------
#
pathTools=/prod/forecast/sea/ROMS/trunk/ROMS_tools
BASE=`pwd`
pathOrig=${BASE}/Origfiles
pathRun=/prod/forecast/run/Arctic-20km
pathRun_exp=/prod/forecast/run/Arctic-20km_exp
pathGrd=${BASE}/Grid
atmfilename=${pathRun}/atmos_Arctic-20km_EC00.flt
prog=168   #prognoselengde for varselet
neg_prog=72 #antall timer i spin-up
inistep=11  #hvilket tidssteg i climfil som skal bli ini (NB! Starter pÃ¥ 0)
#
#coldstart=1 # if coldstart
coldstart=0 # if hotstart from restartfile
irestart=2 #which restart file timestep to use (when replacing in roms.in)
refy=1970; refm=01; refd=01; refh=00; refmin=00  # Reference date as used in ROMS 
ln -sf ${pathOrig}/roms_keyword_hindcast.in_Ve ${pathOrig}/roms_keyword_hindcast.in
ln -sf ${pathOrig}/roms_keyword_forecast.in_Ve ${pathOrig}/roms_keyword_forecast.in
rm ${pathRun}/*msg ${pathRun}/*.info
#
echo "$jobname start" > ${pathRun}/Arctic-20km.start_msg
#
#############################################################################################
# Universal functions used in manipulation of dates 
#
date2stamp () {
    date --utc --date "$1" +%s
}
dateDiff (){
    case $1 in
        -s)   sec=1;      shift;;
        -m)   sec=60;     shift;;
        -h)   sec=3600;   shift;;
        -d)   sec=86400;  shift;;
        *)    sec=86400;;
    esac
    dte1=$(date2stamp $1)
    dte2=$(date2stamp $2)
    diffSec=$((dte2-dte1))
    if ((diffSec < 0)); then abs=-1; else abs=1; fi
#    echo $((diffSec/sec*abs))  # dateDiff positive for all combinations
    echo $((diffSec/sec))  # Use if negative time diffs are needed
}
#############################################################################################
# Let analysis date on atmfile decide model anaylsis time (NB: met.no-program getftime must be available!)
    /prod/forecast/src/mi-bin/src/getftime ${atmfilename} ${pathRun}/anadate.asc
    read yy_ana dummy mm_ana dd_ana hh_ana min_ana < ${pathRun}/anadate.asc
#-----------------------------------------------
# ROMS prepro
if [ $prepos -eq 1 ]; then
#-----------------------------------------------
#-----------------------------------------------
###########
# FIMEX   #
###########
    fimex-0.33 --input.file ${pathRun}/ark_UK_ORCA025-904.flt --input.type felt --output.file ${pathRun}/ocean_clm_z.nc --input.config ${pathOrig}/felt2nc_metno_ROMS.xml
###########
# NESTING #
###########
#Define stuff - put this into a sup-file??
    pathi=${pathRun}/
    rhofile=ocean_clm_z.nc
    ufile=ocean_clm_z.nc
    vfile=ocean_clm_z.nc
    Ni=24
    theta_si=3.0
    theta_bi=0.4
    Tclinei=10
    patho=${pathRun}/
    ofile=ocean
    igtypr=1
    No=35
    theta_so=6.0   
    theta_bo=0.1
    Tclineo=30
    grdfile=ocean_grd.nc
    Vtransformi=10    #For z-koord inn, sett Vtransformi=0, will read z from ifile. If FOAM in, Vtransformi=10
    Vstretchingi=1
    Vtransformo=2	#For z-koord ut, sett Vtransformo=0, will read z from supfile
    Vstretchingo=1
#
#Run grid vertical interpolation
    ${pathTools}/roms2roms/bin/roms2roms << EOF
$pathi$rhofile
$Ni $theta_si $theta_bi $Tclinei
$pathi$rhofile
$pathi$ufile
$pathi$vfile
$Vtransformi $Vstretchingi
${pathGrd}/$grdfile
$No $theta_so $theta_bo $Tclineo
$patho
$ofile
$Vtransformo $Vstretchingo
EOF
#
###########
# Set prognosis time of forecast period (+/- hours)
    echo "date --utc --date='${yy_ana}-${mm_ana}-${dd_ana} ${hh_ana}:00:00 UTC -${neg_prog} hours' '+%Y %m %d %H'" > ${pathRun}/find_startdate.sh
    sh ${pathRun}/find_startdate.sh > ${pathRun}/startdate.asc
    read yy mm dd hh < ${pathRun}/startdate.asc        # ----------------------  Start date of simulation period
    echo "date --utc --date='${yy_ana}-${mm_ana}-${dd_ana} ${hh_ana}:00:00 UTC ${prog} hours' '+%Y %m %d %H'" > ${pathRun}/find_enddate.sh
    sh ${pathRun}/find_enddate.sh > ${pathRun}/enddate.asc
    read yy_end mm_end dd_end hh_end < ${pathRun}/enddate.asc        # ----------------------  End date of simulation period
#
# Henter ut last step fra dagens clim-fil, og extender det
    ncks -d clim_time,19,19 ${pathRun}/ocean_clm.nc ${pathRun}/tmp.nc
    if [ -s ${pathRun}/tmp.nc ]; then #if tmp.nc was created ok
	echo "UKMO file was ok..."
	ncap2 -s 'clim_time=clim_time+30' ${pathRun}/tmp.nc ${pathRun}/last_step.nc #extend timestamp by 30 days
    else #if something was wrong with the UKMO file, then
	echo "UKMO file was not ok..."
	ncra -d clim_time,,,1 ${pathRun}/ocean_clm.nc ${pathRun}/tmp.nc #make a field averaged over det available period
	ncap2 -s 'clim_time=clim_time+30' ${pathRun}/tmp.nc ${pathRun}/last_step.nc #extend timestamp by 30 days
    fi
    rm ${pathRun}/tmp.nc
# combine all files into final clima-file:
    ncrcat -O ${pathRun}/ocean_clm.nc ${pathRun}/last_step.nc ${pathRun}/tmp.nc
    rm ${pathRun}/ocean_clm.nc ${pathRun}/last_step.nc
    mv ${pathRun}/tmp.nc ${pathRun}/ocean_clm.nc
#
#-----------------------------------------------
# Make boundary and initial-file
#-----------------------------------------------
#
    echo
    echo "Make boundary-file..."
    cd ${BASE}
    if [ -s ${pathRun}/ocean_bry.nc ]; then rm ${pathRun}/ocean_bry.nc; fi
    ${pathTools}/Clima/bin/bry_from_clim << EOF
${pathRun}/ocean_clm.nc
${pathRun}/ocean_bry.nc
EOF
    if [ -s ${pathRun}/ocean_bry.nc ]; then
	echo "New bry-file OK"
    else
	echo "Something went wrong in calculation of bry-file! Script exits."
	exit
    fi
#
    cd ${BASE}
################################
#
    echo
    echo "Make initial-file..."
#
# # #
    if [ ${coldstart} -eq 1 ]; then
	if [ -s ${pathRun}/ocean_ini.nc ]; then rm ${pathRun}/ocean_ini.nc; fi
	ncks -d clim_time,${inistep},${inistep} ${pathRun}/ocean_clm.nc ${pathRun}/ocean_ini.nc  # Get initial fields
	ncrename -h -O -v clim_time,ocean_time ${pathRun}/ocean_ini.nc  # Change name of time variable
	ncrename -h -O -d clim_time,time       ${pathRun}/ocean_ini.nc  # Change name of time dimension
	for var in zeta ubar vbar u v salt temp; do  # Remove clim_time as attribute for every variable  hice aice snow_thick ageice uice vice
	    ncatted -h -O -a time,${var},d,c,"clim_time" ${pathRun}/ocean_ini.nc
	done
	for var in tisrf ti tau_iw chu_iw s0mk t0mk sfwat sig11 sig12 sig22 hice aice snow_thick ageice uice vice; do
	    ncap -O -h -s "${var}=zeta*0." ${pathRun}/ocean_ini.nc -o ./tmp.nc  # Add sea ice variables to initial file (with 0-values)
	    mv ./tmp.nc ${pathRun}/ocean_ini.nc
	done
#
    else
	if [ -s ${pathRun}/ocean_ini.nc_${yy}${mm}${dd}${hh} ]; then
	    mv ${pathRun}/ocean_ini.nc_${yy}${mm}${dd}${hh} ${pathRun}/ocean_ini.nc
	    if [ -s ${pathRun}/tide_before_model.nc_${yy}${mm}${dd}${hh} ]; then
		mv ${pathRun}/tide_before_model.nc_${yy}${mm}${dd}${hh} ${pathRun}/tide_learning.nc
	    fi
	else
	    cp ${pathRun}/ocean_ini.nc-3 ${pathRun}/ocean_ini.nc-4
	    cp ${pathRun}/ocean_ini.nc-2 ${pathRun}/ocean_ini.nc-3
	    cp ${pathRun}/ocean_ini.nc-1 ${pathRun}/ocean_ini.nc-2
	    cp ${pathRun}/ocean_ini.nc ${pathRun}/ocean_ini.nc-1
    	    cp ${pathRun}/ocean_rst.nc ${pathRun}/ocean_ini.nc
	fi
    fi
    if [ -s ${pathRun}/ocean_ini.nc ]; then
	echo "New ini-file located as" `ls ${pathRun}/ocean_ini.nc`
    else
	echo "Something wrong with ini-file! Script exits."
	exit
    fi
    rm ${pathRun}/ocean_ini.nc_*    #sletter gamle ini-filer...
    cp ${pathRun}/ocean_ini.nc ${pathRun}/ocean_ini.nc_${yy}${mm}${dd}${hh}  #tar vare pa dagens ini-fil hvis modellens skal kjores flere ganger...
#
#-----------------------------------------------
# Make file with TPXO-data on model area
#-----------------------------------------------
#
    echo
    if [ -s ${pathRun}/ocean_tpxo.nc ]; then
	echo "TPXO file exists..."
    else
	echo "Interpolate TPXO to your grid..."
	cd ${pathTools}/Tpxo/bin
	if [ -s tpxo2grid ]; then
	    ./tpxo2grid ${pathGrd}/ocean_grd.nc nc ${pathRun}/ocean_tpxo.nc  # Extract TPXO-data to new model domain
	else
	    echo "Program Prepro/Tpxo/tpxo2grid not available!"
	    exit
	fi
	echo
	if [ -s ${pathRun}/ocean_tpxo.nc ]; then
	    echo "New tpxo-file ok"
	else
	    echo "Something went wrong in calculation of TPXO-file! Script exits."
	    exit
	fi
    fi
    echo
#
#
    cd ${BASE}
#
# ##########################################################################
# #   Sup-file for tidenc2roms (replace keywords):
# #
# #
#     orgifile=${pathOrig}/tidenc2roms.sup_ORIG    # sup-file with keywords
#     newifile=${pathRun}/tidenc2roms.sup  # sup-file read as standard input for tidenc2roms
# #
#     cp ${orgifile} tmp1.fil
# #--------------------------------------------------
# #   Substitute start simulation date and end date
#     subst=${yy}; itxt='YY_START'
#     perl -pe "s#${itxt}#${subst}#g" < tmp1.fil > tmp2.fil
#     mv tmp2.fil tmp1.fil
#     subst=${mm}; itxt='MM_START'
#     perl -pe "s#${itxt}#${subst}#g" < tmp1.fil > tmp2.fil
#     mv tmp2.fil tmp1.fil
#     subst=${dd}; itxt='DD_START'
#     perl -pe "s#${itxt}#${subst}#g" < tmp1.fil > tmp2.fil
#     mv tmp2.fil tmp1.fil
#     subst=${hh}; itxt='HH_START'
#     perl -pe "s#${itxt}#${subst}#g" < tmp1.fil > tmp2.fil
#     mv tmp2.fil tmp1.fil
#     subst='00'; itxt='MI_START'
#     perl -pe "s#${itxt}#${subst}#g" < tmp1.fil > tmp2.fil
#     mv tmp2.fil tmp1.fil
#     subst=${yy_end}; itxt='YY_END'
#     perl -pe "s#${itxt}#${subst}#g" < tmp1.fil > tmp2.fil
#     mv tmp2.fil tmp1.fil
#     subst=${mm_end}; itxt='MM_END'
#     perl -pe "s#${itxt}#${subst}#g" < tmp1.fil > tmp2.fil
#     mv tmp2.fil tmp1.fil
#     subst=${dd_end}; itxt='DD_END'
#     perl -pe "s#${itxt}#${subst}#g" < tmp1.fil > tmp2.fil
#     mv tmp2.fil tmp1.fil
#     subst=${hh_end}; itxt='HH_END'
#     perl -pe "s#${itxt}#${subst}#g" < tmp1.fil > tmp2.fil
#     mv tmp2.fil tmp1.fil
#     subst='00'; itxt='MI_END'
#     perl -pe "s#${itxt}#${subst}#g" < tmp1.fil > tmp2.fil
#     mv tmp2.fil tmp1.fil
# #
# #---------------------------------------------------
# #   Establish input file read by program
#     mv tmp1.fil ${newifile}
# #   Execute program
#     cd ${pathRun}
#     ln -sf ${pathTools}/Tides/bin/tidenc2roms tidenc2roms
#     ln -sf ${pathTools}/Tides/src/constits.dat constits.dat
#     ln -sf ${pathRun}/ocean_tpxo.nc tpxo.nc
#     ./tidenc2roms
#     cp tide.nc tide_untouched.nc
# #   Put detide-variables from tide.nc written by ROMS into new tide.nc-file
#     if [ -s ${pathRun}/tide_learning.nc ]; then
# 	ncks -A -v tide_period,tide_Eamp,tide_Ephase,tide_Cmax,tide_Cmin,tide_Cangle,tide_Cphase ${pathRun}/tide_untouched.nc ${pathRun}/tide_learning.nc
#     fi
# #
# #
    cd ${BASE}
# #
# ##########################################################################
##
#-----------------------------------------------
# Make file(s) with atmospheric forcing
#-----------------------------------------------
#
# Test that the atmos-file exists
    if [ -s ${pathRun}/ocean_force.nc ]; then rm ${pathRun}/ocean_force.nc ; fi
    fimex-0.33 --input.file ${atmfilename} --output.file ${pathRun}/ocean_force.nc --input.config ${pathOrig}/felt2nc_metno_ROMS.xml
    ${pathTools}/dew2spec/bin/dew2spec ${pathRun}/ocean_force.nc
#
    if [ -s ${pathRun}/ocean_force.nc ]; then
	echo "Atmospheric fields seem to be OK."
    else
	echo "Something went wrong with atmos-files! Script exits."
	exit
    fi
#
# #
# #
#-----------------------------------------------
# Edit ROMS input file, station file and job-script
#-----------------------------------------------
#
#
    cd ${BASE}
    echo
#
#
    perl -pe "s#PATHTOROMSDIR#${BASE}#g"    < ${pathOrig}/roms_keyword_hindcast.in >  ${pathRun}/tmp1.fil
    perl -pe "s#IRESTART#${irestart}#g" < ${pathRun}/tmp1.fil > ${pathRun}/tmp2.fil;  mv ${pathRun}/tmp2.fil ${pathRun}/tmp1.fil
#---------------------------------------------------
#   Reference date for model start time for hindcast run
#
    nodays=`dateDiff -d "${refy}-${refm}-${refd}" "${yy}-${mm}-${dd}"`
#
    if [ ${hh} == "00" ]; then
	subst=${nodays}'.0d0'; itxt='TIDEREF'
    else
	if [ ${hh} == "12" ]; then
	    subst=${nodays}'.5d0'; itxt='TIDEREF'
	else
	    subst=${nodays}'d0'; itxt='TIDEREF'
	fi
    fi
#
    perl -pe "s#${itxt}#${subst}#g" < ${pathRun}/tmp1.fil > ${pathRun}/tmp2.fil
    mv ${pathRun}/tmp2.fil ${pathRun}/tmp1.fil
#
    mv ${pathRun}/tmp1.fil ${pathRun}/roms_hindcast.in
    echo "ROMS hindcast input-file ready for batch"
#---------------------------------------------------
#
#
    perl -pe "s#PATHTOROMSDIR#${BASE}#g"    < ${pathOrig}/roms_keyword_forecast.in >  ${pathRun}/tmp1.fil
    perl -pe "s#IRESTART#${irestart}#g" < ${pathRun}/tmp1.fil > ${pathRun}/tmp2.fil;  mv ${pathRun}/tmp2.fil ${pathRun}/tmp1.fil
#---------------------------------------------------
#   Reference date for model start time for forecast run
#
    nodays=$(($nodays+1))
#
    if [ ${hh} == "00" ]; then
	subst=${nodays}'.0d0'; itxt='TIDEREF'
    else
	if [ ${hh} == "12" ]; then
	    subst=${nodays}'.5d0'; itxt='TIDEREF'
	else
	    subst=${nodays}'d0'; itxt='TIDEREF'
	fi
    fi
#
    perl -pe "s#${itxt}#${subst}#g" < ${pathRun}/tmp1.fil > ${pathRun}/tmp2.fil
    mv ${pathRun}/tmp2.fil ${pathRun}/tmp1.fil
#
    mv ${pathRun}/tmp1.fil ${pathRun}/roms_forecast.in
    echo "ROMS forecast input-file ready for batch"
#
    echo
#
fi  #[ $prepos -eq 1 ]
#############################################################################################
if [ ${run_expmodel} -eq 1 ]; then
    echo "Submitting _exp-model..."
    qsub ../Arctic-20km_exp/Arctic-20km_exp.job_Ve
fi
#############################################################################################
#-----------------------------------------------
# Execute ROMS
if [ $modelrun -eq 1 ]; then
#-----------------------------------------------
    cp ${pathRun}/tide_learning.nc ${pathRun}/tide_before_model.nc_${yy}${mm}${dd}${hh}
    mv ${pathRun}/tide_learning.nc ${pathRun}/tide.nc
# Clean up logfiles...
    mv ${pathRun}/Arctic-20km00h.log-3 ${pathRun}/Arctic-20km00h.log-4
    mv ${pathRun}/Arctic-20km00h.log-2 ${pathRun}/Arctic-20km00h.log-3
    mv ${pathRun}/Arctic-20km00h.log-1 ${pathRun}/Arctic-20km00h.log-2
    mv ${pathRun}/Arctic-20km00h.log ${pathRun}/Arctic-20km00h.log-1
#
    ln -sf ${pathOrig}/Run_Arctic-20km_hindcast_ROMS_00.job_Ve ${pathRun}/Run_Arctic-20km_hindcast_ROMS_00.job
    ln -sf ${pathOrig}/Run_Arctic-20km_forecast_ROMS_00.job_Ve ${pathRun}/Run_Arctic-20km_forecast_ROMS_00.job
    ln -sf ${pathOrig}/ice.in ${pathRun}/ice.in
    chmod 744 ${pathRun}/Run_Arctic-20km_hindcast_ROMS_00.job
    chmod 744 ${pathRun}/Run_Arctic-20km_forecast_ROMS_00.job
#
    # Running the hindcast-part of the modelrun, also with "learning" of tides
    qsub ${pathRun}/Run_Arctic-20km_hindcast_ROMS_00.job
    echo "Waiting maximum 0.25 hours (=900 seconds) for Arctic-20km_hindcast to finish"
    waitfor ${pathRun}/run_ROMS.end_msg 900
#
    if [ -s ${pathRun}/run_ROMS.end_msg ]; then
	cp ${pathRun}/tide.nc ${pathRun}/tide_learning.nc
    fi
#
    mv ${pathRun}/Arctic-20km00f.log-3 ${pathRun}/Arctic-20km00f.log-4
    mv ${pathRun}/Arctic-20km00f.log-2 ${pathRun}/Arctic-20km00f.log-3
    mv ${pathRun}/Arctic-20km00f.log-1 ${pathRun}/Arctic-20km00f.log-2
    mv ${pathRun}/Arctic-20km00f.log ${pathRun}/Arctic-20km00f.log-1
    rm ${pathRun}/run_ROMS.end_msg
    # Running the forecast-part of the modelrun, discarding "tidal learning" after model run...
    qsub ${pathRun}/Run_Arctic-20km_forecast_ROMS_00.job
#
#
    echo "Waiting maximum 1 hours (=3600 seconds) for Arctic-20km_forecast to finish"
    waitfor ${pathRun}/run_ROMS.end_msg 3600
    mv ${pathRun}/hindcast_rst.nc ${pathRun}/ocean_rst.nc
#
    echo "catting files and making 24h avgs..."
    # Put both average files into one...
    ncks -O -d ocean_time,0,23,1 ${pathRun}/hindcast_his.nc ${pathRun}/hindcast_tmp.nc
    ncrcat -O ${pathRun}/hindcast_tmp.nc ${pathRun}/forecast_his.nc ${pathRun}/ocean_his.nc
    ncrcat -O ${pathRun}/hindcast_avg.nc ${pathRun}/forecast_avg.nc ${pathRun}/ocean_avg_1h.nc
    ncrcat -O ${pathRun}/hindcast_sta.nc ${pathRun}/forecast_sta.nc ${pathRun}/ocean_sta.nc
    rm ${pathRun}/ocean_avg.nc 
#
    ncra -O -d ocean_time,0,23,1 ${pathRun}/ocean_avg_1h.nc ${pathRun}/ocean_avg0.nc
    ncra -O -d ocean_time,24,47,1 ${pathRun}/ocean_avg_1h.nc ${pathRun}/ocean_avg1.nc
    ncra -O -d ocean_time,48,71,1 ${pathRun}/ocean_avg_1h.nc ${pathRun}/ocean_avg2.nc
    ncra -O -d ocean_time,72,95,1 ${pathRun}/ocean_avg_1h.nc ${pathRun}/ocean_avg3.nc
    ncra -O -d ocean_time,96,119,1 ${pathRun}/ocean_avg_1h.nc ${pathRun}/ocean_avg4.nc
    ncra -O -d ocean_time,120,143,1 ${pathRun}/ocean_avg_1h.nc ${pathRun}/ocean_avg5.nc
    ncra -O -d ocean_time,144,167,1 ${pathRun}/ocean_avg_1h.nc ${pathRun}/ocean_avg6.nc
    ncra -O -d ocean_time,168,191,1 ${pathRun}/ocean_avg_1h.nc ${pathRun}/ocean_avg7.nc
    ncra -O -d ocean_time,192,215,1 ${pathRun}/ocean_avg_1h.nc ${pathRun}/ocean_avg8.nc
    ncra -O -d ocean_time,216,239,1 ${pathRun}/ocean_avg_1h.nc ${pathRun}/ocean_avg9.nc
    ncrcat ${pathRun}/ocean_avg?.nc ${pathRun}/ocean_avg.nc 
#
    cat ${pathRun}/Arctic-20km00h.log ${pathRun}/Arctic-20km00f.log > ${pathRun}/Arctic-20km00.log
#
fi  # [ $modelrun -eq 1 ]
#
echo `date`
# Give notice to SMS that the job has completed
echo "Arctic-20km has COMPLETED" > ${pathRun}/Arctic-20km.info
echo "Arctic-20km.info"          > ${pathRun}/Arctic-20km.infomsg
#
#-----------------------------------------------
# ROMS postpro
if [ $postpros -eq 1 ]; then
#-----------------------------------------------
    echo "PostPro"
    cd ${pathRun}
# Make files CF-compliant and interpolate to Z-levels
    ln -sf /prod/forecast/sea/ROMS/trunk/Apps/Common/Origfiles/roms2prod.sup_Arctic-20km ${pathRun}/roms2prod.sup
    ln -sf /prod/forecast/sea/ROMS/trunk/Apps/Common/Origfiles/global_atts.in_Arctic-20km ${pathRun}/global_atts.in_Arctic-20km
    ln -sf /prod/forecast/sea/ROMS/trunk/Apps/Common/Origfiles/proj.in_Arctic-20km ${pathRun}/proj.in_Arctic-20km
    ln -sf /prod/forecast/sea/ROMS/trunk/ROMS_tools/roms2prod_2012/bin/roms2prod ${pathRun}/roms2prod
    ./roms2prod
    ln -sf /prod/forecast/sea/ROMS/trunk/Apps/Common/Origfiles/roms2prod.sup_Arctic-20km_SURF_1h ${pathRun}/roms2prod.sup
    ./roms2prod
########################################################
    rm ${pathRun}/surge.nc
    # Make NetCDF file containing only zeta and zeta_detided
    ncks -v zeta ${pathRun}/ocean_avg_1h.nc ${pathRun}/surge.nc
    ncks -A -v zeta_detided ${pathRun}/ocean_avg_1h.nc ${pathRun}/surge.nc
    ncks -A -v mask_rho ${pathRun}/hindcast_his.nc ${pathRun}/surge.nc
    #cp ${pathRun}/surge.nc ${pathRun}/surge.nc_${yy_ana}${mm_ana}${dd_ana}${hh_ana}
    
#
fi  # [ $postpros -eq 1 ]
#
#
#
echo "Arctic-20km00.log"              > ${pathRun}/Arctic-20km00.logmsg
echo "ocean_avg.nc"                   > ${pathRun}/ocean_avg.ncmsg
echo "ocean_avg_z.nc"                 > ${pathRun}/ocean_avg_z.ncmsg
echo "ocean_avg_1h_z_SURF.nc"         > ${pathRun}/ocean_avg_1h_z_SURF.ncmsg
echo "tide_learning.nc"               > ${pathRun}/tide_learning.ncmsg
echo "ocean_rst.nc"                   > ${pathRun}/ocean_rst.ncmsg
#
#
#############################################################################################
################ QUALITY CONTROL!!!!! #######################################################
#############################################################################################
rm error.txt
ln -sf ${pathTools}/Qcontrol/bin/check_tide check_tide
./check_tide ${pathRun}/ocean_avg_1h.nc
if [ -s error.txt ]; then
    echo "Error in detiding!!"
    exit
fi
#############################################################################################
echo "$jobname end" > ${pathRun}/Arctic-20km.end_msg
#
mv /prod/forecast/run/Arctic-20km/Arctic-20km00_prep.log-1 /prod/forecast/run/Arctic-20km/Arctic-20km00_prep.log-2
mv /prod/forecast/run/Arctic-20km/Arctic-20km00_prep.log /prod/forecast/run/Arctic-20km/Arctic-20km00_prep.log-1
mv /prod/forecast/run/Arctic-20km/Arctic-20km00_prep.log0 /prod/forecast/run/Arctic-20km/Arctic-20km00_prep.log
Runstatus "end ......" "$jobname" $nodes
trap 0
exit
