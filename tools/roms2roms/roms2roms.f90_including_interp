PROGRAM romsS2romsS
! Program to obtain nesting (clima) conditions from ROMS history/avg files
! Original program roms2roms created by Jon Albretsen, IMR, Dec 2010, based on programs by Paul Budgell, IMR.
! New version handling all Vtransform and Vstretching by Nils Melsom Kristensen, met.no, Apr 2011.
! Code for Vtransform and Vstretching is copied from 'set_scoord.F' and 'set_depth.F' in the official ROMS code.
! New version does not interpolate horizontally, this is handled by FIMEX.
! Variables to be read from, and written to nc-file, are hardcoded into this program.
!
! 10.05.2011: 	Removed fill, this is now handled by FIMEX
! ! ! ! ! 11.05.2011: 	New option 'addSpinupEndAVG' adds an extra timestep in the beginning of the clima-file containing
! ! ! ! !		the first 18 hours of BC (operational met.no starts at -30h). It also add an extra 12 hour timestep
! ! ! ! !		at the end of the clima-file to make sure the BCs cover the entire 90 hour forecast period. This 
! ! ! ! !		option should only be used with ROMS AVG-files!!
! 25.05.2011: Reimplemeted horizontal interpolation from pol.stereographic to pol.stereographic
!             nestingfiles. If no hor_int is required, set xp=999999.
!
! Usage:
! ./romsS2romsS << EOF
! $pathi$rhofile
! $Ni $theta_si $theta_bi $Tclinei
! $pathi$rhofile
! $pathi$ufile
! $pathi$vfile
! $Vtransformi $Vstretchingi
! $pathgrd$grdfile
! $No $theta_so $theta_bo $Tclineo
! $patho
! $ofile
! $Vtransformo $Vstretchingo
! EOF



use netcdf

implicit none

INTEGER :: statusi, ncgridi, ncidi
INTEGER :: dim_xi_rhoi, dim_eta_rhoi
INTEGER :: dim_timei
INTEGER :: UVarIdi, VVarIdi, SaltVarIdi, TempVarIdi, TimeVarIdi
INTEGER :: UbarVarIdi, VbarVarIdi, ZetaVarIdi
INTEGER :: id_hi
INTEGER :: id_rmaski,id_umaski,id_vmaski
INTEGER :: Lp, Mp, L, M, Ni, Mpo, Lpo, Mo, Lo,lev
real, dimension(:), allocatable :: zlev
REAL, DIMENSION(:,:), allocatable :: hi,hio
REAL, DIMENSION(:,:), allocatable :: rmaski,rmasko,umaski,vmaski,umasko,vmasko
REAL, DIMENSION(:,:,:), allocatable :: z_ri
REAL :: Tclinei, theta_si, theta_bi
REAL*8 :: time_in, time_in_prev, tday
character(len=80) :: xi_dimnamei, eta_dimnamei, time_dimnamei, line,eta_dimnameo,xi_dimnameo
real :: ga(6),gr(6),gaa(6)
integer :: icall,igtypa,igtypr,inter,intopt,iundef,ierror

integer :: ndimri,mxdim,mydim
!parameter :: (ndimri=16)
integer, dimension(:), allocatable :: jinter,jinteru,jinterv
real , dimension(:), allocatable ::   rinter,rinteru,rinterv
REAL, DIMENSION(:,:), ALLOCATABLE :: vturn



INTEGER :: statuso, ncgrido, ncido
INTEGER :: dim_xi_rhoo, dim_eta_rhoo
INTEGER :: dim_xi_uo, dim_eta_uo
INTEGER :: dim_xi_vo, dim_eta_vo
INTEGER :: dim_s_rhoo, dim_timeo, dim_zo
INTEGER :: UVarIdo, VVarIdo, SaltVarIdo, TempVarIdo, TimeVarIdo
INTEGER :: UbarVarIdo, VbarVarIdo, ZetaVarIdo, ZVarIdo
INTEGER :: UiceVarIdo, ViceVarIdo
INTEGER :: UiceVarIdi, ViceVarIdi
integer :: AiceVarIdi,HiceVarIdi,HsnVarIdi,AgeiceVarIdi
integer :: AiceVarIdo,HiceVarIdo,HsnVarIdo,AgeiceVarIdo
INTEGER :: id_ho,id_rmasko
INTEGER :: No
integer :: id_lat_rhoo,id_lon_rhoo

REAL, DIMENSION(:,:), allocatable :: ho, lat_rhoo, lon_rhoo

REAL, DIMENSION(:,:,:), allocatable :: z_ro  !, z_rio
REAL :: Tclineo, theta_so, theta_bo

INTEGER :: itime, otime, iti, kmax

integer :: i,j,k

character (len=99) :: gridfilei, gridfileo
character (len=99) :: avgfile_rho,avgfile_u,avgfile_v
character (len=99) :: clim_root, outfile, clim_path

REAL :: pi, DTOR

REAL, DIMENSION(:,:), allocatable :: work,worku,workv
REAL, DIMENSION(:,:), allocatable :: scr
!REAL, DIMENSION(:,:), allocatable :: scr1
REAL, DIMENSION(:,:,:), allocatable :: scr3du
REAL, DIMENSION(:,:,:), allocatable :: scr3dv
!REAL, DIMENSION(:,:), allocatable :: scr1o
!REAL, DIMENSION(:,:), allocatable :: scr2o
REAL, DIMENSION(:,:), allocatable :: error,erroru,errorv

INTEGER :: nvalue, mxs
REAL, PARAMETER    :: undef = 1.E+37            ! Undefined land value
REAL :: tx, critx, cor

REAL, DIMENSION(:,:,:), ALLOCATABLE :: temp_in
REAL, DIMENSION(:,:,:), ALLOCATABLE :: salt_in
REAL, DIMENSION(:,:,:), ALLOCATABLE :: u_in
REAL, DIMENSION(:,:,:), ALLOCATABLE :: v_in
REAL, DIMENSION(:,:), ALLOCATABLE :: ubar_in, uice
REAL, DIMENSION(:,:), ALLOCATABLE :: vbar_in, vice
REAL, DIMENSION(:,:), ALLOCATABLE :: zeta_in

REAL, DIMENSION(:,:,:), ALLOCATABLE :: temp_out
REAL, DIMENSION(:,:,:), ALLOCATABLE :: salt_out
REAL, DIMENSION(:,:,:), ALLOCATABLE :: u_out
REAL, DIMENSION(:,:,:), ALLOCATABLE :: v_out
REAL, DIMENSION(:,:), ALLOCATABLE :: ubar_out
REAL, DIMENSION(:,:,:), ALLOCATABLE :: scr3d
REAL, DIMENSION(:,:), ALLOCATABLE :: vbar_out
REAL, DIMENSION(:,:), ALLOCATABLE :: zeta_out
REAL, DIMENSION(:,:), ALLOCATABLE :: aice
REAL, DIMENSION(:,:), ALLOCATABLE :: aice_out
REAL, DIMENSION(:,:), ALLOCATABLE :: hice
REAL, DIMENSION(:,:), ALLOCATABLE :: hsn
REAL, DIMENSION(:,:), ALLOCATABLE :: ageice
REAL, DIMENSION(:,:), ALLOCATABLE :: hice_out
REAL, DIMENSION(:,:), ALLOCATABLE :: hsn_out
REAL, DIMENSION(:,:), ALLOCATABLE :: ageice_out

!REAL, DIMENSION(:,:,:), ALLOCATABLE :: scr3d

integer ::  Vtransi,Vtranso,Vstretchi,Vstretcho

REAL :: xp, yp, ylon, dx

! -----------------------------------------------------------
! Read standard input

read(5,'(a)') gridfilei                    	! Name of one of the files listed in file list
read(5,*) Ni, theta_si, theta_bi, Tclinei  	! Vertical grid parameters for input grid
read(5,*) igtypa
read(5,*) ga(1),ga(2),ga(3),ga(4),ga(5),ga(6)
read(5,'(a)') avgfile_rho                 	! input file at rho points
read(5,'(a)') avgfile_u                 	! input file at u points
read(5,'(a)') avgfile_v                 	! input file at v points
read(5,*) Vtransi, Vstretchi			! Input Vtransform and Vstretching
read(5,'(a)') gridfileo                    	! Grid file for the output domain
read(5,*) No, theta_so, theta_bo, Tclineo  	! Vertical grid parameters for output grid
read(5,*) igtypr
read(5,*) gr(1),gr(2),gr(3),gr(4),gr(5),gr(6)
read(5,'(a)') clim_path                    	! Path where new clima file is located
read(5,'(a)') clim_root                    	! Used in name of clima-file
read(5,*) Vtranso, Vstretcho			! Output Vtransform and Vstretching

pi = ATAN(1.)*4.
DTOR = pi/180.
tx = 0.9*undef
critx = 0.01
cor = 1.6
mxs = 1000
icall=2
inter=1
intopt=0
iundef=0
ndimri=16
gaa=ga
!
! ------------------------------------------------------------
! Open input grid file and get info

statusi = nf90_open(trim(gridfilei),nf90_nowrite,ncgridi)
statusi = nf90_inq_dimid(ncgridi,'xi_rho',dim_xi_rhoi)
statusi = nf90_inq_dimid(ncgridi,'eta_rho',dim_eta_rhoi)
statusi = nf90_Inquire_Dimension(ncgridi,dim_xi_rhoi,xi_dimnamei,Lp)
statusi = nf90_Inquire_Dimension(ncgridi,dim_eta_rhoi,eta_dimnamei,Mp)

M = Mp-1
L = Lp-1

write(*,*) 'Lp, Mp = ',Lp,Mp

allocate(hi(Lp,Mp))
allocate(rmaski(Lp,Mp))
allocate(umaski(L,Mp))
allocate(vmaski(Lp,M))
allocate(work(Lp,Mp))
allocate(worku(L,Mp))
allocate(workv(Lp,M))
allocate(scr(Lp,Mp))
! allocate(scr1(Lp,Mp))
! allocate(scru(L,Mp))
! allocate(scrv(Lp,M))
allocate(error(Lp,Mp))
allocate(erroru(L,Mp))
allocate(errorv(Lp,M))

statusi = nf90_inq_varid(ncgridi,'h',id_hi)
if(statusi /= nf90_NoErr) call handle_err(statusi)
statusi = nf90_inq_varid(ncgridi,'mask_rho',id_rmaski)
if(statusi /= nf90_NoErr) call handle_err(statusi)
statusi = nf90_inq_varid(ncgridi,'mask_u',id_umaski)
if(statusi /= nf90_NoErr) call handle_err(statusi)
statusi = nf90_inq_varid(ncgridi,'mask_v',id_vmaski)
if(statusi /= nf90_NoErr) call handle_err(statusi)

statusi = nf90_get_var(ncgridi,id_hi,hi)
if(statusi /= nf90_NoErr) call handle_err(statusi)
statusi = nf90_get_var(ncgridi,id_rmaski,rmaski)
if(statusi /= nf90_NoErr) call handle_err(statusi)
statusi = nf90_get_var(ncgridi,id_umaski,umaski)
if(statusi /= nf90_NoErr) call handle_err(statusi)
statusi = nf90_get_var(ncgridi,id_vmaski,vmaski)
if(statusi /= nf90_NoErr) call handle_err(statusi)

WHERE(rmaski<1) rmaski = 0


statusi = nf90_close(ncgridi)

allocate(temp_in(Lp,Mp,Ni))
allocate(salt_in(Lp,Mp,Ni))
allocate(u_in(L,Mp,Ni))
allocate(v_in(Lp,M,Ni))
allocate(ubar_in(L,Mp))
allocate(vbar_in(Lp,M))
allocate(uice(L,Mp))
allocate(vice(Lp,M))
allocate(zeta_in(Lp,Mp))
allocate(aice(Lp,Mp))
allocate(hice(Lp,Mp))
allocate(hsn(Lp,Mp))
allocate(ageice(Lp,Mp))

! ---------------------------------------------------------------------
! Open and get info on output file

statuso = nf90_open(trim(gridfileo),nf90_nowrite,ncgrido)
if(statuso /= nf90_NoErr) call handle_err(statuso)
if (ga(1).lt.999999) then
  statusi = nf90_inq_dimid(ncgrido,'xi_rho',dim_xi_rhoo)
  statusi = nf90_inq_dimid(ncgrido,'eta_rho',dim_eta_rhoo)
  statusi = nf90_Inquire_Dimension(ncgrido,dim_xi_rhoo,xi_dimnameo,Lpo)
  statusi = nf90_Inquire_Dimension(ncgrido,dim_eta_rhoo,eta_dimnameo,Mpo)
else
  Mpo=Mp
  Lpo=Lp
end if

Mo = Mpo-1
Lo = Lpo-1


write(*,*) 'Lpo, Mpo = ',Lpo,Mpo
if(Vtransi.ne.0) then
! Vertical grid specification for input
  if (ga(1).lt.999999) then
    allocate(z_ri(Lpo,Mpo,Ni))
    allocate(vturn(4,Lpo*Mpo))
  else
    allocate(z_ri(Lp,Mp,Ni))
  end if
!call spec_vert_grid(Lp,Mp,Ni,hi,Tclinei,theta_bi,theta_si,Vtransi,Vstretchi,z_ri)
end if

!allocate(z_rio(Lpo,Mpo,Ni))
allocate(rmasko(Lpo,Mpo))
allocate(umasko(Lo,Mpo))
allocate(vmasko(Lpo,Mo))
allocate(ho(Lpo,Mpo))
allocate(hio(Lpo,Mpo))
! allocate(scr1o(Lpo,Mp))
! allocate(scr2o(Lpo,Mp))

allocate(ubar_out(Lo,Mpo))
allocate(vbar_out(Lpo,Mo))
allocate(zeta_out(Lpo,Mpo))
allocate(aice_out(Lpo,Mpo))
allocate(hice_out(Lpo,Mpo))
allocate(hsn_out(Lpo,Mpo))
allocate(ageice_out(Lpo,Mpo))

if (ga(1).lt.999999) then
  allocate(lat_rhoo(Lpo,Mpo))
  allocate(lon_rhoo(Lpo,Mpo))
  allocate(jinter(Lpo*Mpo*3))
  allocate(rinter(ndimri*Lpo*Mpo))
  allocate(jinteru(Lo*Mpo*3))
  allocate(rinteru(ndimri*Lo*Mpo))
  allocate(jinterv(Lpo*Mo*3))
  allocate(rinterv(ndimri*Lpo*Mo))
end if

statuso = nf90_inq_varid(ncgrido,'lon_rho',id_lon_rhoo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_inq_varid(ncgrido,'lat_rho',id_lat_rhoo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_inq_varid(ncgrido,'h',id_ho)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statusi = nf90_inq_varid(ncgrido,'mask_rho',id_rmasko)
if(statusi /= nf90_NoErr) call handle_err(statuso)
!
statuso = nf90_get_var(ncgrido,id_lon_rhoo,lon_rhoo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_get_var(ncgrido,id_lat_rhoo,lat_rhoo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_get_var(ncgrido,id_ho,ho)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statusi = nf90_get_var(ncgrido,id_rmasko,rmasko)
if(statusi /= nf90_NoErr) call handle_err(statuso)

if(Vtranso.ne.0) then
!Specify output vertical grid
allocate(z_ro(Lpo,Mpo,No))
!call spec_vert_grid(Lp,Mp,No,ho,Tclineo,theta_bo,theta_so,Vtranso,Vstretcho,z_ro)
end if
if (Vtranso==0) then !dersom output er på Z-levels!
  open(unit=17, file=trim("z_ro.sup"), status='old', action='read')
  print *, "Opened z_ro specfile = ", trim("z_ro.sup")
  ! --------------------
  ! Get vertical levels
  ! --------------------
  call readln(line)
  read(line, *) kmax
  allocate(zlev(kmax))
  call readln(line)
  read(line, *) zlev
  write(*,*) zlev
  !må kjøre en sjekk om hi(i,j) er under z_ro, for å definere hvor dypt det skal lagres data i punktet...
  allocate(z_ro(Lpo,Mpo,kmax))
  do j=1,Mpo
    do i=1,Lpo
      do k=1,kmax
	!write(*,*) hi(i,j)
	if (zlev(k).le.hi(i,j)) then
	  z_ro(i,j,k)=-zlev(k)
	else	
	  z_ro(i,j,k)=undef
	end if
      end do
    enddo
    !z_ro=-z_ro
  enddo
  No=kmax
end if

allocate(temp_out(Lpo,Mpo,No))
allocate(salt_out(Lpo,Mpo,No))
allocate(u_out(Lo,Mpo,No))
allocate(v_out(Lpo,Mo,No))
allocate(scr3d(Lpo,Mpo,Ni))
allocate(scr3du(Lo,Mpo,Ni))
allocate(scr3dv(Lpo,Mo,Ni))


statuso = nf90_close(ncgrido)


outfile = TRIM(clim_path) // TRIM(clim_root) // '_clima.nc'
write(*,'(2a)') 'outfile: ', TRIM(outfile)

! Prepare output netCDF file
statuso = nf90_create(trim(outfile),IOR(nf90_clobber,nf90_64BIT_OFFSET),ncido)
if(statuso /= nf90_NoErr) call handle_err(statuso)
!
! Define dimensions
!
statuso = nf90_def_dim(ncido,'xi_rho',Lpo,dim_xi_rhoo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_dim(ncido,'eta_rho',Mpo,dim_eta_rhoo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_dim(ncido,'xi_u',Lo,dim_xi_uo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_dim(ncido,'eta_u',Mpo,dim_eta_uo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_dim(ncido,'xi_v',Lpo,dim_xi_vo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_dim(ncido,'eta_v',Mo,dim_eta_vo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
! if (Vtranso==0) then
!   statuso = nf90_def_dim(ncido,'z',No,dim_zo)
! else
  statuso = nf90_def_dim(ncido,'s_rho',No,dim_s_rhoo)
! end if
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_dim(ncido,'clim_time',nf90_unlimited,dim_timeo)
if(statuso /= nf90_NoErr) call handle_err(statuso)
!
! Define variables
!
statuso = nf90_def_var(ncido,'u',nf90_float,                              &
         (/dim_xi_uo, dim_eta_uo, dim_s_rhoo, dim_timeo/),UVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'v',nf90_float,                              &
         (/dim_xi_vo, dim_eta_vo, dim_s_rhoo, dim_timeo/),VVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'salt',nf90_float,                           &
         (/dim_xi_rhoo, dim_eta_rhoo, dim_s_rhoo, dim_timeo/),SaltVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'temp',nf90_float,                           &
         (/dim_xi_rhoo, dim_eta_rhoo, dim_s_rhoo, dim_timeo/),TempVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso )
statuso = nf90_def_var(ncido,'zeta',nf90_float,                            &
         (/dim_xi_rhoo, dim_eta_rhoo, dim_timeo/),ZetaVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'aice',nf90_float,                            &
         (/dim_xi_rhoo, dim_eta_rhoo, dim_timeo/),AiceVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'hice',nf90_float,                            &
         (/dim_xi_rhoo, dim_eta_rhoo, dim_timeo/),HiceVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'hsn',nf90_float,                            &
         (/dim_xi_rhoo, dim_eta_rhoo, dim_timeo/),HsnVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'ageice',nf90_float,                            &
         (/dim_xi_rhoo, dim_eta_rhoo, dim_timeo/),AgeiceVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'ubar',nf90_float,                            &
         (/dim_xi_uo, dim_eta_uo, dim_timeo/),UbarVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'vbar',nf90_float,                            &
         (/dim_xi_vo, dim_eta_vo, dim_timeo/),VbarVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'uice',nf90_float,                            &
         (/dim_xi_uo, dim_eta_uo, dim_timeo/),UiceVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_def_var(ncido,'vice',nf90_float,                            &
         (/dim_xi_vo, dim_eta_vo, dim_timeo/),ViceVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
!
statuso = nf90_def_var(ncido,'clim_time',nf90_double,dim_timeo,TimeVarIdo) 
if(statuso /= nf90_NoErr) call handle_err(statuso)
!
! if (Vtranso==0) then
!   statuso = nf90_def_var(ncido,'Z',nf90_float,dim_zo,ZVarIdo) 
!   if(statuso /= nf90_NoErr) call handle_err(statuso)
! end if
!
! Include variable attributes
!
statuso = nf90_put_att(ncido,UVarIdo,'long_name','u-momentum component')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,UVarIdo,'units','meter second-1')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,UVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,UVarIdo,'field','u-velocity, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
statuso = nf90_put_att(ncido,VVarIdo,'long_name','v-momentum component')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,VVarIdo,'units','meter second-1')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,VVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,VVarIdo,'field','v-velocity, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
statuso = nf90_put_att(ncido,SaltVarIdo,'long_name','salinity')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,SaltVarIdo,'units','PSU')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,SaltVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,SaltVarIdo,'field','salinity, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
!
statuso = nf90_put_att(ncido,TempVarIdo,'long_name','potential temperature')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,TempVarIdo,'units','Celsius')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,TempVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,TempVarIdo,'field','temperature, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
!
statuso = nf90_put_att(ncido,ZetaVarIdo,'long_name','sea level')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,ZetaVarIdo,'units','metres')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,ZetaVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,ZetaVarIdo,'field','sea level, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
statuso = nf90_put_att(ncido,AiceVarIdo,'long_name','time-averaged fraction of cell covered by ice')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,AiceVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,AiceVarIdo,'field','ice concentration, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
statuso = nf90_put_att(ncido,HiceVarIdo,'long_name','time-averaged average ice thickness in cell')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,HiceVarIdo,'units','metres')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,HiceVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,HiceVarIdo,'field','ice thickness, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
statuso = nf90_put_att(ncido,HsnVarIdo,'long_name','time-averaged average thickness of snow cover in cell')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,HsnVarIdo,'units','metres')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,HsnVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,HsnVarIdo,'field','snow thickness, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
statuso = nf90_put_att(ncido,AgeiceVarIdo,'long_name','time-averaged age of the ice')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,AgeiceVarIdo,'units','days')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,AgeiceVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,AgeiceVarIdo,'field','ice age, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
statuso = nf90_put_att(ncido,UbarVarIdo,'long_name','u-2D momentum component')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,UbarVarIdo,'units','meter second-1')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,UbarVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,UbarVarIdo,'field','u-2D velocity, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
statuso = nf90_put_att(ncido,VbarVarIdo,'long_name','v-2D momentum component')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,VbarVarIdo,'units','meter second-1')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,VbarVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,VbarVarIdo,'field','v-2D velocity, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
statuso = nf90_put_att(ncido,UiceVarIdo,'long_name','time-averaged u-component of ice velocity')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,UiceVarIdo,'units','meter second-1')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,UiceVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,UiceVarIdo,'field','u-component of ice velocity, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
statuso = nf90_put_att(ncido,ViceVarIdo,'long_name','time-averaged v-component of ice velocity')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,ViceVarIdo,'units','meter second-1')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,ViceVarIdo,'time','clim_time')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,ViceVarIdo,'field','v-component of ice velocity, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
!
statuso = nf90_put_att(ncido,TimeVarIdo,'long_name','time since 1970/01/01/00:00')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,TimeVarIdo,'units','days')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,TimeVarIdo,'field','time, scalar, series')
if(statuso /= nf90_NoErr) call handle_err(statuso)
!
! if(Vtranso==0) then
!   statuso = nf90_put_att(ncido,ZVarIdo,'long_name','Depth of Z-levels')
!   if(statuso /= nf90_NoErr) call handle_err(statuso)
!   statuso = nf90_put_att(ncido,ZVarIdo,'units','meters')
!   if(statuso /= nf90_NoErr) call handle_err(statuso)
!   statuso = nf90_put_att(ncido,ZVarIdo,'field','depth, scalar, series')
!   if(statuso /= nf90_NoErr) call handle_err(statuso)
! end if
!
statuso = nf90_put_att(ncido,nf90_global,'type','ROMS/TOMS climatology file')
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_put_att(ncido,nf90_global,'title','Nesting-file for operational run of NorKyst800 at met.no')
if(statuso /= nf90_NoErr) call handle_err(statuso)
!
! Exit definition mode
!
statuso = nf90_enddef(ncido)
if(statuso /= nf90_NoErr) call handle_err(statuso)
!
write(*,*) 'Finished file definition on output file'
!
! ! ---------------------------------------------------------------
!
otime = 0  ! Count time steps for output file
time_in = 0.
!
! Open input averages files
statusi = nf90_open(trim(avgfile_rho),nf90_nowrite,ncidi)
if(statusi /= nf90_NoErr) call handle_err(statusi)
statusi = nf90_inq_dimid(ncidi,'ocean_time',dim_timei)
if(statusi /= nf90_NoErr) call handle_err(statusi)
statusi = nf90_Inquire_Dimension(ncidi,dim_timei,time_dimnamei,Iti)
if(statusi /= nf90_NoErr) call handle_err(statusi)
statusi = nf90_inq_varid(ncidi,'ocean_time',TimeVarIdi)
if(statusi /= nf90_NoErr) call handle_err(statusi)

! if (Vtranso==0) then
!   statuso = nf90_put_var(ncido,ZVarIdo,zlev)
!   if(statuso /= nf90_NoErr) call handle_err(statuso)
! end if
! Lop through time steps on file
! ---------------------------------------------------------------

DO itime = 1,Iti

! ---
! Date
   time_in_prev = time_in
   statusi = nf90_get_var(ncidi,TimeVarIdi,time_in,start=(/ itime /))
   if(statusi /= nf90_NoErr) call handle_err(statusi)
  
  write(*,*) 'time_in:',time_in
  
   IF (time_in <= time_in_prev) CYCLE  ! Prevent repetition of duplicates in time and/or time step backward in time

! Count for output file
  otime = otime + 1
!
! .......................................................................
! !
! Sea level
!
! Read in sea level
   statusi = nf90_inq_varid(ncidi,'zeta',ZetaVarIdi)
   if(statusi /= nf90_NoErr) call handle_err(statusi)
   statusi = nf90_get_var(ncidi,ZetaVarIdi,zeta_in,start=(/ 1, 1, itime/))
   if(statusi /= nf90_NoErr) call handle_err(statusi)
!
! Fill in masked-out values 
      scr = 0.
      scr = zeta_in
      WHERE (rmaski < 1) scr = undef
      CALL fill(Lp,Mp,1,Lp,1,Mp,scr,tx,critx,cor,mxs,work,error,nvalue)
if (ga(1).lt.999999) then
  call grd2grd(icall,igtypa,ga,igtypr,gr,scr,Lp,Mp,zeta_out,Lpo,Mpo,jinter,rinter,ndimri,undef,inter,intopt,iundef,ierror)
else
  zeta_out=zeta_in
end if
!
! Output to netCDF file
   statuso = nf90_put_var(ncido,ZetaVarIdo,zeta_out,start=(/1,1,otime/))
   if(statuso /= nf90_NoErr) call handle_err(statuso)

  write(*,*) 'Completed sea level'
! .......................................................................
! !
! aice
!
! Read in aice
   statusi = nf90_inq_varid(ncidi,'aice',AiceVarIdi)
   if(statusi /= nf90_NoErr) call handle_err(statusi)
   statusi = nf90_get_var(ncidi,AiceVarIdi,aice,start=(/ 1, 1, itime/))
   if(statusi /= nf90_NoErr) call handle_err(statusi)

! Fill in masked-out values 
      WHERE (rmaski < 1) aice = undef
      CALL fill(Lp,Mp,1,Lp,1,Mp,aice,tx,critx,cor,mxs,work,error,nvalue)
if (ga(1).lt.999999) then
  call grd2grd(icall,igtypa,ga,igtypr,gr,aice,Lp,Mp,aice_out,Lpo,Mpo,jinter,rinter,ndimri,undef,inter,intopt,iundef,ierror)
else
  aice_out=aice
end if

! Output to netCDF file
   statuso = nf90_put_var(ncido,AiceVarIdo,aice_out,start=(/1,1,otime/))
   if(statuso /= nf90_NoErr) call handle_err(statuso)

  write(*,*) 'Completed aice'
! .......................................................................
! !
! hice
!
! Read in hice
   statusi = nf90_inq_varid(ncidi,'hice',HiceVarIdi)
   if(statusi /= nf90_NoErr) call handle_err(statusi)
   statusi = nf90_get_var(ncidi,HiceVarIdi,hice,start=(/ 1, 1, itime/))
   if(statusi /= nf90_NoErr) call handle_err(statusi)
!
! Fill in masked-out values 
      WHERE (rmaski < 1) hice = undef
      CALL fill(Lp,Mp,1,Lp,1,Mp,hice,tx,critx,cor,mxs,work,error,nvalue)
if (ga(1).lt.999999) then
  call grd2grd(icall,igtypa,ga,igtypr,gr,hice,Lp,Mp,hice_out,Lpo,Mpo,jinter,rinter,ndimri,undef,inter,intopt,iundef,ierror)
else
  hice_out=hice
end if
!
! Output to netCDF file
   statuso = nf90_put_var(ncido,HiceVarIdo,hice_out,start=(/1,1,otime/))
   if(statuso /= nf90_NoErr) call handle_err(statuso)
!
  write(*,*) 'Completed hice'
! .......................................................................
! !
! hsn
!
! Read in hsn
   statusi = nf90_inq_varid(ncidi,'hsn',HsnVarIdi)
   if(statusi /= nf90_NoErr) call handle_err(statusi)
   statusi = nf90_get_var(ncidi,HsnVarIdi,hsn,start=(/ 1, 1, itime/))
   if(statusi /= nf90_NoErr) call handle_err(statusi)
!
! Fill in masked-out values 
      WHERE (rmaski < 1) hsn = undef
      CALL fill(Lp,Mp,1,Lp,1,Mp,hsn,tx,critx,cor,mxs,work,error,nvalue)
if (ga(1).lt.999999) then
  call grd2grd(icall,igtypa,ga,igtypr,gr,hsn,Lp,Mp,hsn_out,Lpo,Mpo,jinter,rinter,ndimri,undef,inter,intopt,iundef,ierror)
else
  hsn_out=hsn
end if
!
! Output to netCDF file
   statuso = nf90_put_var(ncido,HsnVarIdo,hsn_out,start=(/1,1,otime/))
   if(statuso /= nf90_NoErr) call handle_err(statuso)
!
  write(*,*) 'Completed hsn'
! .......................................................................
! !
! ageice
!
! Read in ageice
   statusi = nf90_inq_varid(ncidi,'ageice',AgeiceVarIdi)
   if(statusi /= nf90_NoErr) call handle_err(statusi)
   statusi = nf90_get_var(ncidi,AgeiceVarIdi,ageice,start=(/ 1, 1, itime/))
   if(statusi /= nf90_NoErr) call handle_err(statusi)
!
! Fill in masked-out values 
      WHERE (rmaski < 1) ageice = undef
      CALL fill(Lp,Mp,1,Lp,1,Mp,ageice,tx,critx,cor,mxs,work,error,nvalue)
if (ga(1).lt.999999) then
  call grd2grd(icall,igtypa,ga,igtypr,gr,ageice,Lp,Mp,ageice_out,Lpo,Mpo,jinter,rinter,ndimri,undef,inter,intopt,iundef,ierror)
else
  ageice_out=ageice
end if
!
! Output to netCDF file
   statuso = nf90_put_var(ncido,AgeiceVarIdo,ageice_out,start=(/1,1,otime/))
   if(statuso /= nf90_NoErr) call handle_err(statuso)
!
  write(*,*) 'Completed ageice'
!
!!!!!!!!!!!!!!!!!!!!!!!!!!nå regne ut z!!
! Vertical grid specification for input
  write(*,*) '###########INPUT##########################'
  if (Vtransi==0) then
    z_ri=0
!   else if (ga(1).lt.999999) then
!     do lev=1,Ni
!       call grd2grd(icall,igtypa,ga,igtypr,gr,z_ri(:,:,lev),Lp,Mp,z_rio(:,:,lev),&
!       Lpo,Mpo,jinter,rinter,ndimri,undef,inter,intopt,iundef,ierror)
!     end do
  else
    if (ga(1).lt.999999) then
      call grd2grd(icall,igtypa,ga,igtypr,gr,hi,Lp,Mp,hio,&
      Lpo,Mpo,jinter,rinter,ndimri,undef,inter,intopt,iundef,ierror)
      call spec_vert_grid(Lpo,Mpo,Ni,hio,zeta_out,Tclinei,theta_bi,theta_si,Vtransi,Vstretchi,z_ri)
      ! dvs.: z_ri er allerede interpolert til nytt gitter...
    else   !Input grid size equals output grid size
      hio=hi
      call spec_vert_grid(Lp,Mp,Ni,hio,zeta_out,Tclinei,theta_bi,theta_si,Vtransi,Vstretchi,z_ri)
    end if
  end if	
!
!Specify output vertical grid
  write(*,*) '###########OutPUT##########################'
  if (Vtranso.ne.0) then
    call spec_vert_grid(Lpo,Mpo,No,ho,zeta_out,Tclineo,theta_bo,theta_so,Vtranso,Vstretcho,z_ro)
  else
    write(*,*) "Output on Z-levels"
  end if
  write(*,*) '###########################################'
! 
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
! Temperature
!
! Read in temperature
   statusi = nf90_inq_varid(ncidi,'temp',TempVarIdi)
   if(statusi /= nf90_NoErr) call handle_err(statusi)
   statusi = nf90_get_var(ncidi,TempVarIdi,temp_in,start=(/1,1,1,itime/))
   if(statusi /= nf90_NoErr) call handle_err(statusi)
!call getvar(ncidi,'temp',itime,temp_in)   !funker ikke, pga variabelnavnet må være eksakt like mange char som er spes.!!
!
!Horizontal interpolation
scr3d=0.0
  do lev=1,Ni
! Fill in masked-out values 
  WHERE (rmaski < 1) temp_in(:,:,lev) = undef
  CALL fill(Lp,Mp,1,Lp,1,Mp,temp_in(:,:,lev),tx,critx,cor,mxs,work,error,nvalue)
    if (ga(1).lt.999999) then
      call grd2grd(icall,igtypa,ga,igtypr,gr,temp_in(:,:,lev),Lp,Mp,scr3d(:,:,lev),&
      Lpo,Mpo,jinter,rinter,ndimri,undef,inter,intopt,iundef,ierror)
    else
      scr3d(:,:,lev)=temp_in(:,:,lev)
    end if
  end do

! Vertical interpolation
  call vert_int(scr3d,Mpo,Lpo,Ni,No,z_ri,temp_out,z_ro,undef,rmaski,rmasko,tx,critx,cor,mxs)
!  temp_out=scr3d
!
! Output to netCDF file
  statuso = nf90_put_var(ncido,TempVarIdo,temp_out,start=(/1,1,1,otime/))
  if(statuso /= nf90_NoErr) call handle_err(statuso)
!
  write(*,*) 'Completed temperature'
! ........................................................................
!
! Salinity
!
! Read in salinity
   statusi = nf90_inq_varid(ncidi,'salt',SaltVarIdi)
   if(statusi /= nf90_NoErr) call handle_err(statusi)
   statusi = nf90_get_var(ncidi,SaltVarIdi,salt_in,start=(/ 1, 1, 1, itime/))
   if(statusi /= nf90_NoErr) call handle_err(statusi)
!Horizontal interpolation
  scr3d=0.0
  do lev=1,Ni
! Fill in masked-out values 
  WHERE (rmaski < 1) salt_in(:,:,lev) = undef
  CALL fill(Lp,Mp,1,Lp,1,Mp,salt_in(:,:,lev),tx,critx,cor,mxs,work,error,nvalue)
    if (ga(1).lt.999999) then
      call grd2grd(icall,igtypa,ga,igtypr,gr,salt_in(:,:,lev),Lp,Mp,scr3d(:,:,lev),&
      Lpo,Mpo,jinter,rinter,ndimri,undef,inter,intopt,iundef,ierror)
    else
      scr3d(:,:,lev)=salt_in(:,:,lev)
    end if
  end do
!
! Vertical interpolation
  call vert_int(scr3d,Mpo,Lpo,Ni,No,z_ri,salt_out,z_ro,undef,rmaski,rmasko,tx,critx,cor,mxs)
!
! Output to netCDF file
  statuso = nf90_put_var(ncido,SaltVarIdo,salt_out,(/1,1,1,otime/))
  if(statuso /= nf90_NoErr) call handle_err(statuso)
!
  write(*,*) 'Completed salinity'
! ----------------------------------------------------------------
! !
! ! 3D Velocity
!close file with rho-points
  statusi = nf90_close(ncidi)
  if(statusi /= nf90_NoErr) call handle_err(statusi)
!
!read stuff at u-points
  statusi = nf90_open(trim(avgfile_u),nf90_nowrite,ncidi)
  if(statusi /= nf90_NoErr) call handle_err(statusi)
! 
! ! Read in velocities
  statusi = nf90_inq_varid(ncidi,'u',UVarIdi)
  if(statusi /= nf90_NoErr) call handle_err(statusi)
  statusi = nf90_get_var(ncidi,UVarIdi,u_in,start=(/ 1, 1, 1, itime/))
  if(statusi /= nf90_NoErr) call handle_err(statusi)
! 
!Horizontal interpolation
  scr3du=0.0
  do lev=1,Ni
! Fill in masked-out values 
  WHERE (umaski < 1) u_in(:,:,lev) = undef
  CALL fill(L,Mp,1,L,1,Mp,u_in(:,:,lev),tx,critx,cor,mxs,worku,erroru,nvalue)
    if (ga(1).lt.999999) then
      call grd2grd(icall,igtypa,ga,igtypr,gr,u_in(:,:,lev),L,Mp,scr3du(:,:,lev),&
      Lo,Mpo,jinteru,rinteru,ndimri,undef,inter,intopt,iundef,ierror)
    else
      scr3du(:,:,lev)=u_in(:,:,lev)
    end if
  end do
!
! ! Vertical interpolation
  call vert_int(scr3du,Mpo,Lo,Ni,No,z_ri,u_out,z_ro,undef,umaski,umasko,tx,critx,cor,mxs) 
! 
! ! ubar
! !
! ! Read in ubar-component
!   statusi = nf90_inq_varid(ncidi,'ubar',UbarVarIdi)
!   if(statusi /= nf90_NoErr) call handle_err(statusi)
!   statusi = nf90_get_var(ncidi,UbarVarIdi,ubar_in)
!   if(statusi /= nf90_NoErr) call handle_err(statusi)
! !
! ! ! Fill in masked-out values 
! !   scru = 0.
! !   scru = ubar_in
! !   WHERE ((scru>1e+30)) scru = undef    !(rmaski<1).or.(rmasko<1).or.
! !   CALL fill(L,Mp,1,L,1,Mp,scru,tx,critx,cor,mxs,work,error,nvalue)
! !   ubar_out = scru
! ubar_out=ubar_in
! ! Output to netCDF file
!   statuso = nf90_put_var(ncido,UbarVarIdo,ubar_out,start=(/1,1,otime/))
!   if(statuso /= nf90_NoErr) call handle_err(statuso)
! !
! ! uice
! !
! ! Read in uice-component
!   statusi = nf90_inq_varid(ncidi,'uice',UiceVarIdi)
!   if(statusi /= nf90_NoErr) call handle_err(statusi)
!   statusi = nf90_get_var(ncidi,UiceVarIdi,uice)
!   if(statusi /= nf90_NoErr) call handle_err(statusi)
! !
! ! ! Fill in masked-out values 
! !   scru = 0.
! !   scru = uice
! !   WHERE ((scru>1e+30)) scru = undef    !(rmaski<1).or.(rmasko<1).or.
! !   CALL fill(L,Mp,1,L,1,Mp,scru,tx,critx,cor,mxs,work,error,nvalue)
! !   uice = scru
! ! Output to netCDF file
!   statuso = nf90_put_var(ncido,UiceVarIdo,uice,start=(/1,1,otime/))
!   if(statuso /= nf90_NoErr) call handle_err(statuso)
! !
!   write(*,*) 'Completed u-velocities'
! ! ! ........................................................................
!close file with u-points
  statusi = nf90_close(ncidi)
  if(statusi /= nf90_NoErr) call handle_err(statusi)
!
!read stuff at v-points
  statusi = nf90_open(trim(avgfile_v),nf90_nowrite,ncidi)
  if(statusi /= nf90_NoErr) call handle_err(statusi)
!
  statusi = nf90_inq_varid(ncidi,'v',VVarIdi)
  if(statusi /= nf90_NoErr) call handle_err(statusi)
  statusi = nf90_get_var(ncidi,VVarIdi,v_in,start=(/ 1, 1, 1, itime/))
  if(statusi /= nf90_NoErr) call handle_err(statusi)
!
!Horizontal interpolation
  scr3dv=0.0
  do lev=1,Ni
! Fill in masked-out values 
  WHERE (vmaski < 1) v_in(:,:,lev) = undef
  CALL fill(Lp,M,1,Lp,1,M,v_in(:,:,lev),tx,critx,cor,mxs,workv,errorv,nvalue)
    if (ga(1).lt.999999) then
      call grd2grd(icall,igtypa,ga,igtypr,gr,v_in(:,:,lev),Lp,M,scr3dv(:,:,lev),&
      Lpo,Mo,jinterv,rinterv,ndimri,undef,inter,intopt,iundef,ierror)
    else
      scr3dv(:,:,lev)=v_in(:,:,lev)
    end if
  end do
!
! ! Vertical interpolation
  call vert_int(scr3dv,Mo,Lpo,Ni,No,z_ri,v_out,z_ro,undef,vmaski,umasko,tx,critx,cor,mxs) !mask brukes ikke lenger, men om den skal brukes, må maski også interpoleres...
!
! ! Read in vbar-component
!   statusi = nf90_inq_varid(ncidi,'vbar',VbarVarIdi)
!   if(statusi /= nf90_NoErr) call handle_err(statusi)
!   statusi = nf90_get_var(ncidi,VbarVarIdi,vbar_in)
!   if(statusi /= nf90_NoErr) call handle_err(statusi)
! ! ! fill
! !   scrv = 0.
! !   scrv = vbar_in
! !   WHERE ((scrv>1e+30)) scrv = undef
! !   CALL fill(Lp,M,1,Lp,1,M,scrv,tx,critx,cor,mxs,work,error,nvalue)
! !   vbar_out = scrv
! vbar_out=vbar_in
! !   
!   statuso = nf90_put_var(ncido,VbarVarIdo,vbar_out,start=(/1,1,otime/))
!   if(statuso /= nf90_NoErr) call handle_err(statuso)
! !
! ! vice
! !
! ! Read in vice-component
!   statusi = nf90_inq_varid(ncidi,'vice',ViceVarIdi)
!   if(statusi /= nf90_NoErr) call handle_err(statusi)
!   statusi = nf90_get_var(ncidi,ViceVarIdi,vice)
!   if(statusi /= nf90_NoErr) call handle_err(statusi)
! !
! ! ! Fill in masked-out values 
! !   scrv = 0.
! !   scrv = vice
! !   WHERE ((scru>1e+30)) scru = undef    !(rmaski<1).or.(rmasko<1).or.
! !   CALL fill(Lp,M,1,Lp,1,M,scrv,tx,critx,cor,mxs,work,error,nvalue)
! !   vice = scrv
! ! Output to netCDF file
!   statuso = nf90_put_var(ncido,ViceVarIdo,vice,start=(/1,1,otime/))
!   if(statuso /= nf90_NoErr) call handle_err(statuso)
! !
! ! Rotate vectors
!   do lev=1,No
!     if (ga(1).lt.999999) then
!       call grv2grv(icall,igtypa,gaa,igtypr,gr,u_out(:,:,lev),v_out(:,:,lev),Lpo,Mpo,&
!       vturn,undef,ierror)
!     end if
!   end do
! !
! ! Output to netCDF file
  statuso = nf90_put_var(ncido,UVarIdo,u_out,start=(/1,1,1,otime/))
  if(statuso /= nf90_NoErr) call handle_err(statuso)
! 
! Output to netCDF file
  statuso = nf90_put_var(ncido,VVarIdo,v_out,start=(/1,1,1,otime/))
  if(statuso /= nf90_NoErr) call handle_err(statuso)
!
! ! 
   write(*,*) 'Completed velocities'
! ! ........................................................................
! ! ----------------------------------------------------------------
!
! Write out time
  tday = time_in/86400.  ! Input in ROMS is in s, output should be in days
!
  statuso = nf90_put_var(ncido,TimeVarIdo,tday,start=(/otime/))
  if(statuso /= nf90_NoErr) call handle_err(statuso)
!
  write(*,*) 'Wrote time = ',tday,' days, time_in = ', time_in
!
!Reopen file with rho-points
  statusi = nf90_close(ncidi)
  if(statusi /= nf90_NoErr) call handle_err(statusi)
  statusi = nf90_open(trim(avgfile_rho),nf90_nowrite,ncidi)
  if(statusi /= nf90_NoErr) call handle_err(statusi)
!
ENDDO
!
! ----------------------------------------------------------------
statuso = nf90_sync(ncido)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statuso = nf90_close(ncido)
if(statuso /= nf90_NoErr) call handle_err(statuso)
statusi = nf90_close(ncidi)
if(statusi /= nf90_NoErr) call handle_err(statusi)
!
    contains

    ! -----------------------------
    subroutine readln(line)
    ! --------------------------------------
    !  Reads a line from a file, skipping
    !  comments and blank lines.
    !
    !  Comments starts with a character from
    !  COMCHAR and continues to the end of line.
    !
    !  Bjørn Ådlandsvik,
    !  IMR, October 1997
    ! --------------------------------------
      ! -----------------
      ! Arguments 
      ! -----------------
      character(len=*), intent(out) :: line ! Line in text file

      ! --------------------------------
      ! Local constants and variables
      ! -------------------------------
      character(len=*), parameter :: COMCHAR = "*!#"
                         ! Comment starting characters
      integer :: ipos    ! Start position for comment

      ! ------------------------------
      ! Line scanning loop
      ! ------------------------------
      do
        
        ! Read a line
        read(unit=17, fmt="(A)") line
        ! Remove any comments
        ipos = scan(line, COMCHAR)
        if (ipos /= 0) then  
          line = line(:ipos-1)
        end if
        ! Exit loop if decommented line is not blank
        if (len_trim(line) /= 0) then  
          exit
        end if
      end do
    end subroutine readln
!
!
END PROGRAM romsS2romsS

